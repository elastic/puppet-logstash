input {
	rabbitmq {
		exchange => "prodweb_v1"
		host => "localhost"
		queue => "webserver_logs"
		auto_delete => false
		durable => true
		password => "Garfield9"
		user => "lsuser"
		vhost => "/logstash"
	}   
}

filter {
  if [type] == "apache-access" {   # this is where we use the type from the input section
    grok {
      match => [ "message", "%{COMBINEDAPACHELOG}" ]
    }
  }
  if [type] == "apache-ssl-access" {   # this is where we use the type from the input section
    grok {
      match => [ "message", "%{IPORHOST:clientip} (%{USER:ident}|%{QS:ident}) (%{USER:auth}|%{QS:auth}) \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{QS:ssl_protocol} %{QS:ssl_cipher}" ]
    }
  }
  if [type] == "apache-error" {   # this is where we use the type from the input section
    grok {
      match => [ "message", "\[(?<timestamp>%{DAY:day} %{MONTH:month} %{MONTHDAY} %{TIME} %{YEAR})\] \[%{WORD:class}?\:%{WORD}?\] \[pid %{WORD:originator}\:tid %{NUMBER}\] (\[client %{IP:clientip}:%{NUMBER:port}\])?%{GREEDYDATA:errmsg}" ]
    }
  }  
  if [type] == "apache-access" or [type] == "apache-ssl-access" {
    useragent {
      source => "agent"
      regexes => "/etc/logstash/vendor/uaparser/regexes_ims.yaml"
    }
    
    if [major] {
      mutate {
        rename => [ "name", "browser_name" ]
        add_field => { "browser_version" => "%{browser_name}.%{major}" }
        remove_field => ["major", "minor"]
      }
    } else {
      mutate {
        rename => [ "name", "browser_name" ]      
        add_field => { "browser_version" => "%{browser_name}" }
        remove_field => ["major", "minor"]
      }
    }    
    
    mutate {
      convert => [ "bytes", "integer"]
    }

    date {
      locale => "en"
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z", "EEE MMM dd HH:mm:ss yyyy", "EEE MMM dd HH:mm:ss yyyy" ]
    } 

    
    grok {
      match => ['request', "%{URIPATH:uri_path}(?:%{URIPARAM:uri_param})?" ]
    } 
    if [uri_path] {
      grok {
        match => ['uri_path', ".*\.(css|js|kss)$$"]
        add_tag => ['structure_files']
        tag_on_failure => []
      }
      if "structure_files" not in [tags]{
        grok {
            match => ['uri_path', ".*\.(jpg|png|gif|bmp|jpeg|ico)$"]
            add_tag => ['images']
            tag_on_failure => []
        }
        if "images" not in [tags]{
            grok {
                match => ['uri_path', ".*\.(zip|gz|tar|rar|dat|tbz|bz|bz2|doc|docx|xls|xlsx|ppt|pptx|pdf)$"]
                add_tag => ['files']
                tag_on_failure => []
            }
        }
      }
    } 
    if [referrer] {
      grok {
        match => ['referrer', "%{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST:referrer_host})?(?:%{URIPATHPARAM})?" ]
        tag_on_failure => []
      }
    }  
         
  }
  if [clientip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)" and [clientip] {
    geoip {
         source => "clientip"
         database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
    }
  }
}


output {
    elasticsearch_http {
        host  => "ess-st-01.imsweb.com"
        port  => "9200"
        index => "weblog-%{+YYYY.MM.dd}"
        template => "/etc/logstash/outputs/elasticsearch/weblog_field_mapping.json"
        template_name => "template_weblog"
        user  => "loguser"
        password => "L3BX5UE3jD2fd9924vO"
        idle_flush_time => 5
        flush_size => 20
    }
}
